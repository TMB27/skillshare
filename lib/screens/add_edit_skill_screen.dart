import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../config/app_theme.dart';
import '../models/skill_model.dart';
import '../providers/skills_provider.dart';
import '../providers/auth_provider.dart';
import '../widgets/loading_overlay.dart';

class AddEditSkillScreen extends StatefulWidget {
  final String? skillId;

  const AddEditSkillScreen({super.key, this.skillId});

  bool get isEditing => skillId != null;

  @override
  State<AddEditSkillScreen> createState() => _AddEditSkillScreenState();
}

class _AddEditSkillScreenState extends State<AddEditSkillScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _priceController = TextEditingController();
  final _durationController = TextEditingController();
  final _locationController = TextEditingController();

  String? _selectedCategory;
  String? _selectedExperienceLevel;
  String? _selectedSkillType;
  bool _isActive = true;

  final List<String> _categories = [
    'Technology',
    'Creative Arts',
    'Music',
    'Cooking',
    'Sports & Fitness',
    'Language',
    'Business',
    'Crafts',
    'Academic',
    'Other',
  ];

  final List<String> _experienceLevels = [
    'Beginner',
    'Intermediate',
    'Advanced',
    'Expert',
  ];

  final List<String> _skillTypes = [
    'In-Person',
    'Online',
    'Hybrid',
  ];

  @override
  void initState() {
    super.initState();
    if (widget.isEditing) {
      _loadSkillData();
    }
  }

  Future<void> _loadSkillData() async {
    final skillsProvider = context.read<SkillsProvider>();
    final skill = await skillsProvider.getSkillById(widget.skillId!);
    if (skill != null) {
      _titleController.text = skill.title;
      _descriptionController.text = skill.description;
      _priceController.text = skill.priceAmount.toString();
      _durationController.text = skill.durationPerSession?.toString() ?? '';
      _locationController.text = skill.location ?? '';
      setState(() {
        _selectedCategory = skill.category;
        _selectedExperienceLevel = skill.experienceLevel;
        _selectedSkillType = skill.skillType;
        _isActive = skill.isActive;
      });
    }
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _priceController.dispose();
    _durationController.dispose();
    _locationController.dispose();
    super.dispose();
  }

  Future<void> _saveSkill() async {
    if (!_formKey.currentState!.validate()) return;

    final skillsProvider = context.read<SkillsProvider>();
    final authProvider = context.read<AuthProvider>();

    final skill = Skill(
      id: widget.isEditing ? widget.skillId! : '', // ID will be generated by Supabase
      userId: authProvider.currentUser!.id,
      title: _titleController.text,
      description: _descriptionController.text,
      category: _selectedCategory!,
      experienceLevel: _selectedExperienceLevel!,
      skillType: _selectedSkillType!,
      availability: 'flexible', // Default value
      priceType: 'paid', // Default value
      priceAmount: double.parse(_priceController.text),
      priceCurrency: 'USD',
      durationPerSession: int.parse(_durationController.text),
      location: _locationController.text.isNotEmpty ? _locationController.text : 'Not specified',
      isActive: _isActive,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );

    bool success;
    if (widget.isEditing) {
      success = await skillsProvider.updateSkill(skill);
    } else {
      success = await skillsProvider.createSkill(skill);
    }

    if (success && mounted) {
      context.pop();
    } else if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(skillsProvider.errorMessage ?? 'Failed to save skill'),
          backgroundColor: AppTheme.errorRed,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final skillsProvider = context.watch<SkillsProvider>();

    return LoadingOverlay(
      isLoading: skillsProvider.isLoading,
      child: Scaffold(
        appBar: AppBar(
          title: Text(widget.isEditing ? 'Edit Skill' : 'Add Skill'),
          actions: [
            IconButton(
              onPressed: _saveSkill,
              icon: const Icon(Icons.save),
            ),
          ],
        ),
        body: SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                TextFormField(
                  controller: _titleController,
                  decoration: const InputDecoration(labelText: 'Title'),
                  validator: (value) => value!.isEmpty ? 'Please enter a title' : null,
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: _descriptionController,
                  decoration: const InputDecoration(labelText: 'Description'),
                  maxLines: 5,
                  validator: (value) => value!.isEmpty ? 'Please enter a description' : null,
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    Expanded(
                      child: TextFormField(
                        controller: _priceController,
                        decoration: const InputDecoration(labelText: 'Price (USD)'),
                        keyboardType: TextInputType.number,
                        validator: (value) => value!.isEmpty ? 'Please enter a price' : null,
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: TextFormField(
                        controller: _durationController,
                        decoration: const InputDecoration(labelText: 'Duration (minutes)'),
                        keyboardType: TextInputType.number,
                        validator: (value) => value!.isEmpty ? 'Please enter a duration' : null,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                DropdownButtonFormField<String>(
                  value: _selectedCategory,
                  decoration: const InputDecoration(labelText: 'Category'),
                  items: _categories.map((category) {
                    return DropdownMenuItem(value: category, child: Text(category));
                  }).toList(),
                  onChanged: (value) => setState(() => _selectedCategory = value),
                  validator: (value) => value == null ? 'Please select a category' : null,
                ),
                const SizedBox(height: 16),
                DropdownButtonFormField<String>(
                  value: _selectedExperienceLevel,
                  decoration: const InputDecoration(labelText: 'Experience Level'),
                  items: _experienceLevels.map((level) {
                    return DropdownMenuItem(value: level, child: Text(level));
                  }).toList(),
                  onChanged: (value) => setState(() => _selectedExperienceLevel = value),
                  validator: (value) => value == null ? 'Please select an experience level' : null,
                ),
                const SizedBox(height: 16),
                DropdownButtonFormField<String>(
                  value: _selectedSkillType,
                  decoration: const InputDecoration(labelText: 'Skill Type'),
                  items: _skillTypes.map((type) {
                    return DropdownMenuItem(value: type, child: Text(type));
                  }).toList(),
                  onChanged: (value) => setState(() => _selectedSkillType = value),
                  validator: (value) => value == null ? 'Please select a skill type' : null,
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: _locationController,
                  decoration: const InputDecoration(labelText: 'Location (optional)'),
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    const Text('Active'),
                    Switch(
                      value: _isActive,
                      onChanged: (value) => setState(() => _isActive = value),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}


